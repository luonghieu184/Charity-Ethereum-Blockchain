'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/home/luonghieu/Documents/Charity/Fund/components/ContributeForm.js';


var ContributeForm = function (_Component) {
  (0, _inherits3.default)(ContributeForm, _Component);

  function ContributeForm() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ContributeForm);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ContributeForm.__proto__ || (0, _getPrototypeOf2.default)(ContributeForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: '',
      errorMessage: '',
      successMessage: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var campaign, accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                campaign = (0, _campaign2.default)(_this.props.address);

                _this.setState({ loading: true, errorMessage: '', successMessage: '' });

                _context.prev = 3;
                _context.next = 6;
                return _web2.default.eth.getAccounts();

              case 6:
                accounts = _context.sent;
                _context.next = 9;
                return campaign.methods.contribute().send({
                  from: accounts[0],
                  value: _web2.default.utils.toWei(_this.state.value, 'ether')
                });

              case 9:
                _this.setState({ successMessage: "Chúc mừng bạn đã ủng hộ chiến dịch này" });

                _routes.Router.replaceRoute('/campaigns/' + _this.props.address);

                _context.next = 16;
                break;

              case 13:
                _context.prev = 13;
                _context.t0 = _context['catch'](3);

                _this.setState({ errorMessage: _context.t0.message });

              case 16:

                _this.setState({ loading: false, value: '' });

              case 17:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[3, 13]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(ContributeForm, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, success: !!this.state.successMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }, _react2.default.createElement('div', { 'class': 'payment-get', __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, _react2.default.createElement('div', { 'class': 'payment-input', __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, 'Nh\u1EADp s\u1ED1 ti\u1EC1n \u1EE7ng h\u1ED9'), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.value,
        onChange: function onChange(event) {
          return _this3.setState({ value: event.target.value });
        },
        label: 'ether',
        labelPosition: 'right',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      })))), _react2.default.createElement(_semanticUiReact.Message, { success: true, header: 'Yeah!', content: this.state.successMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'ERROR!', content: 'GIAO D\u1ECACH L\u1ED6I HO\u1EB6C B\u1EA0N \u0110\xC3 T\u1EEA CH\u1ED0I THANH TO\xC1N', __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, 'QUY\xCAN G\xD3P NGAY!'));
    }
  }]);

  return ContributeForm;
}(_react.Component);

exports.default = ContributeForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ29udHJpYnV0ZUZvcm0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInZhbHVlIiwiZXJyb3JNZXNzYWdlIiwic3VjY2Vzc01lc3NhZ2UiLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJjYW1wYWlnbiIsImFjY291bnRzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInByZXZlbnREZWZhdWx0IiwicHJvcHMiLCJhZGRyZXNzIiwic2V0U3RhdGUiLCJldGgiLCJnZXRBY2NvdW50cyIsInNlbnQiLCJtZXRob2RzIiwiY29udHJpYnV0ZSIsInNlbmQiLCJmcm9tIiwidXRpbHMiLCJ0b1dlaSIsInJlcGxhY2VSb3V0ZSIsInQwIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImtleSIsInJlbmRlciIsIl90aGlzMyIsImNyZWF0ZUVsZW1lbnQiLCJlcnJvciIsInN1Y2Nlc3MiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIkZpZWxkIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJsYWJlbCIsImxhYmVsUG9zaXRpb24iLCJoZWFkZXIiLCJjb250ZW50IiwicHJpbWFyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUxBLElBQUlBLGVBQWUscUVBQW5COzs7QUFPQSxJQUFJQyxpQkFBaUIsVUFBVUMsVUFBVixFQUFzQjtBQUN6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QUZGLEVBT0UsZ0JBQU1MLGFBQU4sQ0FDRSxLQURGLEVBRUUsRUFBRSxTQUFTLGVBQVgsRUFBNEJHLFVBQVU7QUFDbENDLG9CQUFVNUQsWUFEd0I7QUFFbEM2RCxzQkFBWTtBQUZzQjtBQUF0QyxPQUZGLEVBT0UsZ0JBQU1MLGFBQU4sQ0FDRSxPQURGLEVBRUU7QUFDRUcsa0JBQVU7QUFDUkMsb0JBQVU1RCxZQURGO0FBRVI2RCxzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFLDhDQVJGLENBUEYsRUFpQkUsZ0JBQU1MLGFBQU4seUJBQTJCO0FBQ3pCckMsZUFBTyxLQUFLRCxLQUFMLENBQVdDLEtBRE87QUFFekI0QyxrQkFBVSxTQUFTQSxRQUFULENBQWtCcEMsS0FBbEIsRUFBeUI7QUFDakMsaUJBQU80QixPQUFPakIsUUFBUCxDQUFnQixFQUFFbkIsT0FBT1EsTUFBTXFDLE1BQU4sQ0FBYTdDLEtBQXRCLEVBQWhCLENBQVA7QUFDRCxTQUp3QjtBQUt6QjhDLGVBQU8sT0FMa0I7QUFNekJDLHVCQUFlLE9BTlU7QUFPekJQLGtCQUFVO0FBQ1JDLG9CQUFVNUQsWUFERjtBQUVSNkQsc0JBQVk7QUFGSjtBQVBlLE9BQTNCLENBakJGLENBUEYsQ0FSRixDQVBLLEVBc0RMLGdCQUFNTCxhQUFOLDJCQUE2QixFQUFFRSxTQUFTLElBQVgsRUFBaUJTLFFBQVEsT0FBekIsRUFBa0NDLFNBQVMsS0FBS2xELEtBQUwsQ0FBV0csY0FBdEQsRUFBc0VzQyxVQUFVO0FBQ3pHQyxvQkFBVTVELFlBRCtGO0FBRXpHNkQsc0JBQVk7QUFGNkY7QUFBaEYsT0FBN0IsQ0F0REssRUEyREwsZ0JBQU1MLGFBQU4sMkJBQTZCLEVBQUVDLE9BQU8sSUFBVCxFQUFlVSxRQUFRLFFBQXZCLEVBQWlDQyxTQUFTLHVGQUExQyxFQUFtSVQsVUFBVTtBQUN0S0Msb0JBQVU1RCxZQUQ0SjtBQUV0SzZELHNCQUFZO0FBRjBKO0FBQTdJLE9BQTdCLENBM0RLLEVBZ0VMLGdCQUFNTCxhQUFOLDBCQUVFLEVBQUVhLFNBQVMsSUFBWCxFQUFpQi9DLFNBQVMsS0FBS0osS0FBTCxDQUFXSSxPQUFyQyxFQUE4Q3FDLFVBQVU7QUFDcERDLG9CQUFVNUQsWUFEMEM7QUFFcEQ2RCxzQkFBWTtBQUZ3QztBQUF4RCxPQUZGLEVBT0UsdUJBUEYsQ0FoRUssQ0FBUDtBQTBFRDtBQS9FMkIsR0FBRCxDQUE3Qjs7QUFrRkEsU0FBTzVELGNBQVA7QUFDRCxDQWpLb0Isa0JBQXJCOztrQkFtS2VBLGMiLCJmaWxlIjoidW5rbm93biJ9